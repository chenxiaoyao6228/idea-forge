# Base stage for shared dependencies
FROM node:20.18.1-alpine AS builder
RUN corepack enable && corepack prepare pnpm@8.15.4 --activate

# add system dependencies 
RUN apk add --no-cache \
    openssl3 \
    openssl3-dev \
    libc6-compat \
    openssh-client \
    git \
    postgresql-client

WORKDIR /app

# Copy syntax: COPY xx from xx to xx
# Copy all files
COPY . .

RUN pnpm install --frozen-lockfile

RUN pnpm build

## production stage
FROM node:20.18.1-alpine AS production
RUN corepack enable && corepack prepare pnpm@8.15.4 --activate

# add system dependencies 
RUN apk add --no-cache \
    openssl3 \
    postgresql-client

WORKDIR /app


COPY --from=builder /app/package.json ./
COPY --from=builder /app/pnpm-lock.yaml ./
COPY --from=builder /app/pnpm-workspace.yaml ./

# shared
COPY --from=builder /app/shared/package.json ./shared/
COPY --from=builder /app/shared/dist ./shared/dist

# api
COPY --from=builder /app/api/dist ./api/dist
COPY --from=builder /app/api/package.json ./api/package.json
COPY --from=builder /app/api/public ./api/public
COPY --from=builder /app/api/prisma ./api/prisma
COPY --from=builder /app/api/ecosystem.config.js ./api/ecosystem.config.js
COPY --from=builder /app/api/.env.vault ./api/.env.vault
RUN cat ./api/.env.vault

# client build
COPY --from=builder /app/api/view ./api/view 

RUN pnpm install --prod --frozen-lockfile

RUN npm install pm2 -g

RUN cd api && pnpm prisma generate

HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD node -e "require('http').get('http://localhost:5000/health', (r) => process.exit(r.statusCode === 200 ? 0 : 1))"

EXPOSE 5000 5001


CMD cd api && pm2-runtime start ecosystem.config.js --env production