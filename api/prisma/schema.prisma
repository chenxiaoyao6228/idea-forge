// NOTE: do not use Enum in this file, use contracts to constrain the data

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

generator zod {
  provider = "zod-prisma-types"
  output   = "../../shared/src/contracts/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int     @id @default(autoincrement())
  email       String  @unique
  displayName String? // Display name. Without displayName, user will unbind everything when changing email
  imageUrl    String?

  emailVerified DateTime? // Email verification time
  status        String // User status

  created_time DateTime @default(now()) @db.Timestamp()
  updated_time DateTime @updatedAt @db.Timestamp()

  hashedRefreshToken String?
  password           Password?
  connections        Connection[]
  docs               Doc[]
  sharedDocs         DocShare[]   @relation("SharedToUser")
  DocShare           DocShare[]
  File               File[]
}

model Password {
  hash String

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId Int  @unique
}

model Connection {
  id           String @id @default(cuid())
  providerName String // Provider name: github, google etc.
  providerId   String // Provider's user ID

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int // Changed to Int type to match User.id

  @@unique([providerName, providerId])
}

model Doc {
  id            String      @id @default(cuid())
  title         String
  content       String
  contentBinary Bytes?
  isArchived    Boolean     @default(false)
  isStarred     Boolean     @default(false)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  owner         User        @relation(fields: [ownerId], references: [id])
  ownerId       Int // Changed from String to Int to match User.id type
  parent        Doc?        @relation("ChildrenDocs", fields: [parentId], references: [id])
  parentId      String?
  children      Doc[]       @relation("ChildrenDocs")
  icon          String?
  coverImageId  String?     @unique
  coverImage    CoverImage?
  position      Int         @default(0)
  sharedWith    DocShare[]
}

model CoverImage {
  id       String  @id @default(cuid())
  url      String
  scrollY  Float
  doc      Doc     @relation(fields: [docId], references: [id])
  docId    String  @unique
  fileId   String  @unique // 关联到实际文件
  file     File    @relation(fields: [fileId], references: [id], onDelete: Cascade)
  isPreset Boolean @default(false)
}

model DocShare {
  id       String @id @default(cuid())
  doc      Doc    @relation(fields: [docId], references: [id], onDelete: Cascade)
  docId    String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId Int
  sharedTo User   @relation("SharedToUser", fields: [userId], references: [id], onDelete: Cascade)
  userId   Int

  permission String   @default("READ") // EDIT/READ
  noticeType String   @default("NEW") // NEW/UPDATE/NONE
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([docId, userId])
}

model File {
  id          String   @id @default(cuid())
  key         String   @unique
  url         String   @default("")
  status      String   @default("pending") // pending/active/deleted
  size        Int      @default(0)
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  contentType String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  coverImage CoverImage?
}
